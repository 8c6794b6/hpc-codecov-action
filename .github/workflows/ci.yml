name: ci

on:
  pull_request:
  push:
    paths-ignore:
      - '**.md'

env:
  cache-version: v5

defaults:
  run:
    shell: bash

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      run_it: >-
        ${{
        steps.skip_check.outputs.should_skip != 'true' ||
        github.ref_name == github.event.repository.default_branch
        }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content_newer

  run-self:
    name: Build, test, and run self
    needs: pre_job
    if: ${{ needs.pre_job.outputs.run_it == 'true' }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache stack related directories
        uses: 8c6794b6/playing-with-github/.github/actions/setup-stack-cache@main
        with:
          cache-key:
            ${{ hashFiles('hs/project1/stack.yaml') }}-${{ env.cache-version }}

      - name: Cache ghc under macOS
        if: runner.os == 'macos'
        uses: actions/cache@v4
        with:
          path: ~/.ghcup
          key: ghcup-${{ runner.os }}-${{ env.cache-version }}

      - name: Setup haskell
        id: setup-hs
        uses: haskell-actions/setup@v2
        with:
          enable-stack: true
          cabal-update: true

      - name: Show stack, cabal, and ghc versions
        run: |
          which stack && stack --version
          which cabal && cabal --version
          which ghc && ghc --version

      # Building the sample projects with stack and cabal-install
      # before running "npm test", to avoid timeout.
      - name: Build and test sample project with stack
        run: |
          stack --stack-yaml=hs/project1/stack.yaml --skip-msys \
            build --fast --test --coverage

      - name: Build and test sample project with cabal-install
        run: |
          ( cd hs/project1 && cabal update && cabal test --enable-coverage )

      # The 'spawn' function in node 20.12.2 not working well under
      # windows, see: https://github.com/nodejs/node/issues/52554
      - name: Get node version
        id: nv
        run: |
          case ${{ runner.os }} in
            "Windows")
              echo "node-version=20.12.1" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "node-version=20" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nv.outputs.node-version }}

      - name: Show node version
        run: node --version

      - name: Build with npm
        run: |
          npm install
          npm run clean
          npm run build
          npm run bundle

      - name: Run tests with coverage
        run: npm run coverage

      - name: Send coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report of project1 with stack
        uses: ./
        id: p1-stack
        with:
          target: stack:project1-test
          root: hs/project1
          out: p1-stack.json

      - name: Generate coverage report of project1 with cabal
        uses: ./
        id: p1-cabal
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          out: p1-cabal.json

      - name: Generate coverage report of project1 with cabal in lcov format
        uses: ./
        id: p1-cabal-lcov
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          format: lcov

      - name: Generate coverage report of project1 with cabal in cobertura format
        uses: ./
        id: p1-cabal-cobertura
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          format: cobertura

      - name: Show outputs of self action
        run: |
          echo "p1-stack.exe: ${{ steps.p1-stack.outputs.exe }}"
          echo "p1-stack.report: ${{ steps.p1-stack.outputs.report }}"
          echo "p1-cabal.exe: ${{ steps.p1-cabal.outputs.exe }}"
          echo "p1-cabal.report: ${{ steps.p1-cabal.outputs.report }}"
          echo "p1-cabal-lcov.exe: ${{ steps.p1-cabal-lcov.outputs.exe }}"
          echo "p1-cabal-lcov.report: ${{ steps.p1-cabal-lcov.outputs.report }}"
          echo "p1-cabal-cobertura.exe: ${{ steps.p1-cabal-cobertura.outputs.exe }}"
          echo "p1-cabal-cobertura.report: ${{ steps.p1-cabal-cobertura.outputs.report }}"

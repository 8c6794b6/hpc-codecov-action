name: ci

on:
  pull_request:
  push:
    paths-ignore:
      - '**.md'

env:
  cache-version: v5

defaults:
  run:
    shell: bash

jobs:
  run-self:
    name: Build, test, and run self
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

        # XXX: Caching stack directories for macos-latest is disabled
        # at the moment, executable installed under cache directory
        # not working well ...

      - name: Cache directory for stack (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: ~/.stack/
          key: ${{ runner.os }}-stack-${{ env.cache-version }}

      - name: Cache directory for stack (windows-latest)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\Programs\stack\
          key: ${{ runner.os }}-stack-${{ env.cache-version }}

      - name: Cache more directories for stack under windows
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Roaming\stack\
          key: ${{ runner.os }}-stack-win-extra-${{ env.cache-version }}

      # Building the sample projects before running "npm test", to
      # avoid timeout.

      - name: Build and test sample project with stack
        run: |
          stack --stack-yaml=hs/project1/stack.yaml --skip-msys \
            build --fast --test --coverage

      - name: Build and test sample project with cabal-install
        run: |
          ( cd hs/project1 && cabal test --enable-coverage )

      - name: Build with npm
        run: |
          npm install
          npm run clean
          npm run build
          npm run bundle

      - name: Run tests with coverage
        run: npm run coverage

      - name: Send coverage report
        uses: codecov/codecov-action@v4

      - name: Generate coverage report of project1 with stack
        uses: ./
        id: p1-stack
        with:
          target: stack:project1-test
          root: hs/project1
          out: p1-stack.json

      - name: Show outputs of p1-stack
        run: |
          echo "outputs.exe: ${{ steps.p1-stack.outputs.exe }}"
          echo "outputs.report: ${{ steps.p1-stack.outputs.report }}"

      - name: Generate coverage report of project1 with cabal
        uses: ./
        id: p1-cabal
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          out: p1-cabal.json

      - name: Show outputs of p1-cabal
        run: |
          echo "outputs.exe: ${{ steps.p1-cabal.outputs.exe }}"
          echo "outputs.report: ${{ steps.p1-cabal.outputs.report }}"

      - name: Generate coverage report of project1 with cabal in lcov format
        uses: ./
        id: p1-cabal-lcov
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          format: lcov

      - name: Show outputs of p1-cabal-lcov
        run: |
          echo "outputs.exe: ${{ steps.p1-cabal-lcov.outputs.exe }}"
          echo "outputs.report: ${{ steps.p1-cabal-lcov.outputs.report }}"

      - name: Generate coverage report of project1 with cabal in cobertura format
        uses: ./
        id: p1-cabal-cobertura
        with:
          target: cabal:project1-test
          root: hs/project1
          excludes: Main,Paths_project1
          format: cobertura

      - name: Show outputs of p1-cabal-cobertura
        run: |
          echo "outputs.exe: ${{ steps.p1-cabal-cobertura.outputs.exe }}"
          echo "outputs.report: ${{ steps.p1-cabal-cobertura.outputs.report }}"
